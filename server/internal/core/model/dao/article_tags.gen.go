// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"server/internal/core/model/entity"
)

func newArticleTag(db *gorm.DB, opts ...gen.DOOption) articleTag {
	_articleTag := articleTag{}

	_articleTag.articleTagDo.UseDB(db, opts...)
	_articleTag.articleTagDo.UseModel(&entity.ArticleTag{})

	tableName := _articleTag.articleTagDo.TableName()
	_articleTag.ALL = field.NewAsterisk(tableName)
	_articleTag.ID = field.NewUint(tableName, "id")
	_articleTag.CreatedAt = field.NewTime(tableName, "created_at")
	_articleTag.UpdatedAt = field.NewTime(tableName, "updated_at")
	_articleTag.DeletedAt = field.NewField(tableName, "deleted_at")
	_articleTag.Name = field.NewString(tableName, "name")
	_articleTag.Slug = field.NewString(tableName, "slug")
	_articleTag.Color = field.NewString(tableName, "color")

	_articleTag.fillFieldMap()

	return _articleTag
}

// articleTag 文章标签
type articleTag struct {
	articleTagDo articleTagDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Name      field.String
	Slug      field.String
	Color     field.String

	fieldMap map[string]field.Expr
}

func (a articleTag) Table(newTableName string) *articleTag {
	a.articleTagDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a articleTag) As(alias string) *articleTag {
	a.articleTagDo.DO = *(a.articleTagDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *articleTag) updateTableName(table string) *articleTag {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewUint(table, "id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.DeletedAt = field.NewField(table, "deleted_at")
	a.Name = field.NewString(table, "name")
	a.Slug = field.NewString(table, "slug")
	a.Color = field.NewString(table, "color")

	a.fillFieldMap()

	return a
}

func (a *articleTag) WithContext(ctx context.Context) IArticleTagDo {
	return a.articleTagDo.WithContext(ctx)
}

func (a articleTag) TableName() string { return a.articleTagDo.TableName() }

func (a articleTag) Alias() string { return a.articleTagDo.Alias() }

func (a articleTag) Columns(cols ...field.Expr) gen.Columns { return a.articleTagDo.Columns(cols...) }

func (a *articleTag) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *articleTag) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["id"] = a.ID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
	a.fieldMap["name"] = a.Name
	a.fieldMap["slug"] = a.Slug
	a.fieldMap["color"] = a.Color
}

func (a articleTag) clone(db *gorm.DB) articleTag {
	a.articleTagDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a articleTag) replaceDB(db *gorm.DB) articleTag {
	a.articleTagDo.ReplaceDB(db)
	return a
}

type articleTagDo struct{ gen.DO }

type IArticleTagDo interface {
	gen.SubQuery
	Debug() IArticleTagDo
	WithContext(ctx context.Context) IArticleTagDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IArticleTagDo
	WriteDB() IArticleTagDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IArticleTagDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IArticleTagDo
	Not(conds ...gen.Condition) IArticleTagDo
	Or(conds ...gen.Condition) IArticleTagDo
	Select(conds ...field.Expr) IArticleTagDo
	Where(conds ...gen.Condition) IArticleTagDo
	Order(conds ...field.Expr) IArticleTagDo
	Distinct(cols ...field.Expr) IArticleTagDo
	Omit(cols ...field.Expr) IArticleTagDo
	Join(table schema.Tabler, on ...field.Expr) IArticleTagDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IArticleTagDo
	RightJoin(table schema.Tabler, on ...field.Expr) IArticleTagDo
	Group(cols ...field.Expr) IArticleTagDo
	Having(conds ...gen.Condition) IArticleTagDo
	Limit(limit int) IArticleTagDo
	Offset(offset int) IArticleTagDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IArticleTagDo
	Unscoped() IArticleTagDo
	Create(values ...*entity.ArticleTag) error
	CreateInBatches(values []*entity.ArticleTag, batchSize int) error
	Save(values ...*entity.ArticleTag) error
	First() (*entity.ArticleTag, error)
	Take() (*entity.ArticleTag, error)
	Last() (*entity.ArticleTag, error)
	Find() ([]*entity.ArticleTag, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.ArticleTag, err error)
	FindInBatches(result *[]*entity.ArticleTag, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.ArticleTag) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IArticleTagDo
	Assign(attrs ...field.AssignExpr) IArticleTagDo
	Joins(fields ...field.RelationField) IArticleTagDo
	Preload(fields ...field.RelationField) IArticleTagDo
	FirstOrInit() (*entity.ArticleTag, error)
	FirstOrCreate() (*entity.ArticleTag, error)
	FindByPage(offset int, limit int) (result []*entity.ArticleTag, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IArticleTagDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a articleTagDo) Debug() IArticleTagDo {
	return a.withDO(a.DO.Debug())
}

func (a articleTagDo) WithContext(ctx context.Context) IArticleTagDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a articleTagDo) ReadDB() IArticleTagDo {
	return a.Clauses(dbresolver.Read)
}

func (a articleTagDo) WriteDB() IArticleTagDo {
	return a.Clauses(dbresolver.Write)
}

func (a articleTagDo) Session(config *gorm.Session) IArticleTagDo {
	return a.withDO(a.DO.Session(config))
}

func (a articleTagDo) Clauses(conds ...clause.Expression) IArticleTagDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a articleTagDo) Returning(value interface{}, columns ...string) IArticleTagDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a articleTagDo) Not(conds ...gen.Condition) IArticleTagDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a articleTagDo) Or(conds ...gen.Condition) IArticleTagDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a articleTagDo) Select(conds ...field.Expr) IArticleTagDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a articleTagDo) Where(conds ...gen.Condition) IArticleTagDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a articleTagDo) Order(conds ...field.Expr) IArticleTagDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a articleTagDo) Distinct(cols ...field.Expr) IArticleTagDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a articleTagDo) Omit(cols ...field.Expr) IArticleTagDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a articleTagDo) Join(table schema.Tabler, on ...field.Expr) IArticleTagDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a articleTagDo) LeftJoin(table schema.Tabler, on ...field.Expr) IArticleTagDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a articleTagDo) RightJoin(table schema.Tabler, on ...field.Expr) IArticleTagDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a articleTagDo) Group(cols ...field.Expr) IArticleTagDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a articleTagDo) Having(conds ...gen.Condition) IArticleTagDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a articleTagDo) Limit(limit int) IArticleTagDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a articleTagDo) Offset(offset int) IArticleTagDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a articleTagDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IArticleTagDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a articleTagDo) Unscoped() IArticleTagDo {
	return a.withDO(a.DO.Unscoped())
}

func (a articleTagDo) Create(values ...*entity.ArticleTag) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a articleTagDo) CreateInBatches(values []*entity.ArticleTag, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a articleTagDo) Save(values ...*entity.ArticleTag) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a articleTagDo) First() (*entity.ArticleTag, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ArticleTag), nil
	}
}

func (a articleTagDo) Take() (*entity.ArticleTag, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ArticleTag), nil
	}
}

func (a articleTagDo) Last() (*entity.ArticleTag, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ArticleTag), nil
	}
}

func (a articleTagDo) Find() ([]*entity.ArticleTag, error) {
	result, err := a.DO.Find()
	return result.([]*entity.ArticleTag), err
}

func (a articleTagDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.ArticleTag, err error) {
	buf := make([]*entity.ArticleTag, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a articleTagDo) FindInBatches(result *[]*entity.ArticleTag, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a articleTagDo) Attrs(attrs ...field.AssignExpr) IArticleTagDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a articleTagDo) Assign(attrs ...field.AssignExpr) IArticleTagDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a articleTagDo) Joins(fields ...field.RelationField) IArticleTagDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a articleTagDo) Preload(fields ...field.RelationField) IArticleTagDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a articleTagDo) FirstOrInit() (*entity.ArticleTag, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ArticleTag), nil
	}
}

func (a articleTagDo) FirstOrCreate() (*entity.ArticleTag, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ArticleTag), nil
	}
}

func (a articleTagDo) FindByPage(offset int, limit int) (result []*entity.ArticleTag, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a articleTagDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a articleTagDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a articleTagDo) Delete(models ...*entity.ArticleTag) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *articleTagDo) withDO(do gen.Dao) *articleTagDo {
	a.DO = *do.(*gen.DO)
	return a
}
