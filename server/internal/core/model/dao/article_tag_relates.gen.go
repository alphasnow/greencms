// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"server/internal/core/model/entity"
)

func newArticleTagRelate(db *gorm.DB, opts ...gen.DOOption) articleTagRelate {
	_articleTagRelate := articleTagRelate{}

	_articleTagRelate.articleTagRelateDo.UseDB(db, opts...)
	_articleTagRelate.articleTagRelateDo.UseModel(&entity.ArticleTagRelate{})

	tableName := _articleTagRelate.articleTagRelateDo.TableName()
	_articleTagRelate.ALL = field.NewAsterisk(tableName)
	_articleTagRelate.ArticleID = field.NewUint(tableName, "article_id")
	_articleTagRelate.TagID = field.NewUint(tableName, "tag_id")

	_articleTagRelate.fillFieldMap()

	return _articleTagRelate
}

// articleTagRelate 文章标签关联
type articleTagRelate struct {
	articleTagRelateDo articleTagRelateDo

	ALL       field.Asterisk
	ArticleID field.Uint
	TagID     field.Uint

	fieldMap map[string]field.Expr
}

func (a articleTagRelate) Table(newTableName string) *articleTagRelate {
	a.articleTagRelateDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a articleTagRelate) As(alias string) *articleTagRelate {
	a.articleTagRelateDo.DO = *(a.articleTagRelateDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *articleTagRelate) updateTableName(table string) *articleTagRelate {
	a.ALL = field.NewAsterisk(table)
	a.ArticleID = field.NewUint(table, "article_id")
	a.TagID = field.NewUint(table, "tag_id")

	a.fillFieldMap()

	return a
}

func (a *articleTagRelate) WithContext(ctx context.Context) IArticleTagRelateDo {
	return a.articleTagRelateDo.WithContext(ctx)
}

func (a articleTagRelate) TableName() string { return a.articleTagRelateDo.TableName() }

func (a articleTagRelate) Alias() string { return a.articleTagRelateDo.Alias() }

func (a articleTagRelate) Columns(cols ...field.Expr) gen.Columns {
	return a.articleTagRelateDo.Columns(cols...)
}

func (a *articleTagRelate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *articleTagRelate) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 2)
	a.fieldMap["article_id"] = a.ArticleID
	a.fieldMap["tag_id"] = a.TagID
}

func (a articleTagRelate) clone(db *gorm.DB) articleTagRelate {
	a.articleTagRelateDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a articleTagRelate) replaceDB(db *gorm.DB) articleTagRelate {
	a.articleTagRelateDo.ReplaceDB(db)
	return a
}

type articleTagRelateDo struct{ gen.DO }

type IArticleTagRelateDo interface {
	gen.SubQuery
	Debug() IArticleTagRelateDo
	WithContext(ctx context.Context) IArticleTagRelateDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IArticleTagRelateDo
	WriteDB() IArticleTagRelateDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IArticleTagRelateDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IArticleTagRelateDo
	Not(conds ...gen.Condition) IArticleTagRelateDo
	Or(conds ...gen.Condition) IArticleTagRelateDo
	Select(conds ...field.Expr) IArticleTagRelateDo
	Where(conds ...gen.Condition) IArticleTagRelateDo
	Order(conds ...field.Expr) IArticleTagRelateDo
	Distinct(cols ...field.Expr) IArticleTagRelateDo
	Omit(cols ...field.Expr) IArticleTagRelateDo
	Join(table schema.Tabler, on ...field.Expr) IArticleTagRelateDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IArticleTagRelateDo
	RightJoin(table schema.Tabler, on ...field.Expr) IArticleTagRelateDo
	Group(cols ...field.Expr) IArticleTagRelateDo
	Having(conds ...gen.Condition) IArticleTagRelateDo
	Limit(limit int) IArticleTagRelateDo
	Offset(offset int) IArticleTagRelateDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IArticleTagRelateDo
	Unscoped() IArticleTagRelateDo
	Create(values ...*entity.ArticleTagRelate) error
	CreateInBatches(values []*entity.ArticleTagRelate, batchSize int) error
	Save(values ...*entity.ArticleTagRelate) error
	First() (*entity.ArticleTagRelate, error)
	Take() (*entity.ArticleTagRelate, error)
	Last() (*entity.ArticleTagRelate, error)
	Find() ([]*entity.ArticleTagRelate, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.ArticleTagRelate, err error)
	FindInBatches(result *[]*entity.ArticleTagRelate, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.ArticleTagRelate) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IArticleTagRelateDo
	Assign(attrs ...field.AssignExpr) IArticleTagRelateDo
	Joins(fields ...field.RelationField) IArticleTagRelateDo
	Preload(fields ...field.RelationField) IArticleTagRelateDo
	FirstOrInit() (*entity.ArticleTagRelate, error)
	FirstOrCreate() (*entity.ArticleTagRelate, error)
	FindByPage(offset int, limit int) (result []*entity.ArticleTagRelate, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IArticleTagRelateDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a articleTagRelateDo) Debug() IArticleTagRelateDo {
	return a.withDO(a.DO.Debug())
}

func (a articleTagRelateDo) WithContext(ctx context.Context) IArticleTagRelateDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a articleTagRelateDo) ReadDB() IArticleTagRelateDo {
	return a.Clauses(dbresolver.Read)
}

func (a articleTagRelateDo) WriteDB() IArticleTagRelateDo {
	return a.Clauses(dbresolver.Write)
}

func (a articleTagRelateDo) Session(config *gorm.Session) IArticleTagRelateDo {
	return a.withDO(a.DO.Session(config))
}

func (a articleTagRelateDo) Clauses(conds ...clause.Expression) IArticleTagRelateDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a articleTagRelateDo) Returning(value interface{}, columns ...string) IArticleTagRelateDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a articleTagRelateDo) Not(conds ...gen.Condition) IArticleTagRelateDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a articleTagRelateDo) Or(conds ...gen.Condition) IArticleTagRelateDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a articleTagRelateDo) Select(conds ...field.Expr) IArticleTagRelateDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a articleTagRelateDo) Where(conds ...gen.Condition) IArticleTagRelateDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a articleTagRelateDo) Order(conds ...field.Expr) IArticleTagRelateDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a articleTagRelateDo) Distinct(cols ...field.Expr) IArticleTagRelateDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a articleTagRelateDo) Omit(cols ...field.Expr) IArticleTagRelateDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a articleTagRelateDo) Join(table schema.Tabler, on ...field.Expr) IArticleTagRelateDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a articleTagRelateDo) LeftJoin(table schema.Tabler, on ...field.Expr) IArticleTagRelateDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a articleTagRelateDo) RightJoin(table schema.Tabler, on ...field.Expr) IArticleTagRelateDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a articleTagRelateDo) Group(cols ...field.Expr) IArticleTagRelateDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a articleTagRelateDo) Having(conds ...gen.Condition) IArticleTagRelateDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a articleTagRelateDo) Limit(limit int) IArticleTagRelateDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a articleTagRelateDo) Offset(offset int) IArticleTagRelateDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a articleTagRelateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IArticleTagRelateDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a articleTagRelateDo) Unscoped() IArticleTagRelateDo {
	return a.withDO(a.DO.Unscoped())
}

func (a articleTagRelateDo) Create(values ...*entity.ArticleTagRelate) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a articleTagRelateDo) CreateInBatches(values []*entity.ArticleTagRelate, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a articleTagRelateDo) Save(values ...*entity.ArticleTagRelate) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a articleTagRelateDo) First() (*entity.ArticleTagRelate, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ArticleTagRelate), nil
	}
}

func (a articleTagRelateDo) Take() (*entity.ArticleTagRelate, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ArticleTagRelate), nil
	}
}

func (a articleTagRelateDo) Last() (*entity.ArticleTagRelate, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ArticleTagRelate), nil
	}
}

func (a articleTagRelateDo) Find() ([]*entity.ArticleTagRelate, error) {
	result, err := a.DO.Find()
	return result.([]*entity.ArticleTagRelate), err
}

func (a articleTagRelateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.ArticleTagRelate, err error) {
	buf := make([]*entity.ArticleTagRelate, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a articleTagRelateDo) FindInBatches(result *[]*entity.ArticleTagRelate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a articleTagRelateDo) Attrs(attrs ...field.AssignExpr) IArticleTagRelateDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a articleTagRelateDo) Assign(attrs ...field.AssignExpr) IArticleTagRelateDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a articleTagRelateDo) Joins(fields ...field.RelationField) IArticleTagRelateDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a articleTagRelateDo) Preload(fields ...field.RelationField) IArticleTagRelateDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a articleTagRelateDo) FirstOrInit() (*entity.ArticleTagRelate, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ArticleTagRelate), nil
	}
}

func (a articleTagRelateDo) FirstOrCreate() (*entity.ArticleTagRelate, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.ArticleTagRelate), nil
	}
}

func (a articleTagRelateDo) FindByPage(offset int, limit int) (result []*entity.ArticleTagRelate, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a articleTagRelateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a articleTagRelateDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a articleTagRelateDo) Delete(models ...*entity.ArticleTagRelate) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *articleTagRelateDo) withDO(do gen.Dao) *articleTagRelateDo {
	a.DO = *do.(*gen.DO)
	return a
}
