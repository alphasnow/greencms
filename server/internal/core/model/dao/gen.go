// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                = new(Query)
	AdminUser        *adminUser
	Article          *article
	ArticleCategory  *articleCategory
	ArticleContent   *articleContent
	ArticleStatistic *articleStatistic
	ArticleTag       *articleTag
	ArticleTagRelate *articleTagRelate
	WebBanner        *webBanner
	WebMeta          *webMeta
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	AdminUser = &Q.AdminUser
	Article = &Q.Article
	ArticleCategory = &Q.ArticleCategory
	ArticleContent = &Q.ArticleContent
	ArticleStatistic = &Q.ArticleStatistic
	ArticleTag = &Q.ArticleTag
	ArticleTagRelate = &Q.ArticleTagRelate
	WebBanner = &Q.WebBanner
	WebMeta = &Q.WebMeta
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:               db,
		AdminUser:        newAdminUser(db, opts...),
		Article:          newArticle(db, opts...),
		ArticleCategory:  newArticleCategory(db, opts...),
		ArticleContent:   newArticleContent(db, opts...),
		ArticleStatistic: newArticleStatistic(db, opts...),
		ArticleTag:       newArticleTag(db, opts...),
		ArticleTagRelate: newArticleTagRelate(db, opts...),
		WebBanner:        newWebBanner(db, opts...),
		WebMeta:          newWebMeta(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	AdminUser        adminUser
	Article          article
	ArticleCategory  articleCategory
	ArticleContent   articleContent
	ArticleStatistic articleStatistic
	ArticleTag       articleTag
	ArticleTagRelate articleTagRelate
	WebBanner        webBanner
	WebMeta          webMeta
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		AdminUser:        q.AdminUser.clone(db),
		Article:          q.Article.clone(db),
		ArticleCategory:  q.ArticleCategory.clone(db),
		ArticleContent:   q.ArticleContent.clone(db),
		ArticleStatistic: q.ArticleStatistic.clone(db),
		ArticleTag:       q.ArticleTag.clone(db),
		ArticleTagRelate: q.ArticleTagRelate.clone(db),
		WebBanner:        q.WebBanner.clone(db),
		WebMeta:          q.WebMeta.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		AdminUser:        q.AdminUser.replaceDB(db),
		Article:          q.Article.replaceDB(db),
		ArticleCategory:  q.ArticleCategory.replaceDB(db),
		ArticleContent:   q.ArticleContent.replaceDB(db),
		ArticleStatistic: q.ArticleStatistic.replaceDB(db),
		ArticleTag:       q.ArticleTag.replaceDB(db),
		ArticleTagRelate: q.ArticleTagRelate.replaceDB(db),
		WebBanner:        q.WebBanner.replaceDB(db),
		WebMeta:          q.WebMeta.replaceDB(db),
	}
}

type queryCtx struct {
	AdminUser        IAdminUserDo
	Article          IArticleDo
	ArticleCategory  IArticleCategoryDo
	ArticleContent   IArticleContentDo
	ArticleStatistic IArticleStatisticDo
	ArticleTag       IArticleTagDo
	ArticleTagRelate IArticleTagRelateDo
	WebBanner        IWebBannerDo
	WebMeta          IWebMetaDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		AdminUser:        q.AdminUser.WithContext(ctx),
		Article:          q.Article.WithContext(ctx),
		ArticleCategory:  q.ArticleCategory.WithContext(ctx),
		ArticleContent:   q.ArticleContent.WithContext(ctx),
		ArticleStatistic: q.ArticleStatistic.WithContext(ctx),
		ArticleTag:       q.ArticleTag.WithContext(ctx),
		ArticleTagRelate: q.ArticleTagRelate.WithContext(ctx),
		WebBanner:        q.WebBanner.WithContext(ctx),
		WebMeta:          q.WebMeta.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
