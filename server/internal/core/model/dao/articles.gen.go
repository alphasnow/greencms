// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"server/internal/core/model/entity"
)

func newArticle(db *gorm.DB, opts ...gen.DOOption) article {
	_article := article{}

	_article.articleDo.UseDB(db, opts...)
	_article.articleDo.UseModel(&entity.Article{})

	tableName := _article.articleDo.TableName()
	_article.ALL = field.NewAsterisk(tableName)
	_article.ID = field.NewUint(tableName, "id")
	_article.CreatedAt = field.NewTime(tableName, "created_at")
	_article.UpdatedAt = field.NewTime(tableName, "updated_at")
	_article.DeletedAt = field.NewField(tableName, "deleted_at")
	_article.CategoryID = field.NewUint(tableName, "category_id")
	_article.Title = field.NewString(tableName, "title")
	_article.ImageURL = field.NewField(tableName, "image_url")
	_article.OriginURL = field.NewString(tableName, "origin_url")
	_article.OriginAuthor = field.NewString(tableName, "origin_author")
	_article.AdminID = field.NewUint(tableName, "admin_id")
	_article.Keywords = field.NewString(tableName, "keywords")
	_article.Description = field.NewString(tableName, "description")
	_article.Sort = field.NewInt32(tableName, "sort")
	_article.ArticleCategory = articleBelongsToArticleCategory{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ArticleCategory", "entity.ArticleCategory"),
	}

	_article.ArticleContent = articleHasOneArticleContent{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ArticleContent", "entity.ArticleContent"),
	}

	_article.ArticleStatistic = articleHasOneArticleStatistic{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ArticleStatistic", "entity.ArticleStatistic"),
	}

	_article.ArticleTags = articleManyToManyArticleTags{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ArticleTags", "entity.ArticleTag"),
	}

	_article.fillFieldMap()

	return _article
}

// article 文章
type article struct {
	articleDo articleDo

	ALL             field.Asterisk
	ID              field.Uint // 文章管理ID
	CreatedAt       field.Time // 添加时间
	UpdatedAt       field.Time
	DeletedAt       field.Field
	CategoryID      field.Uint   // 分类id
	Title           field.String // 文章标题
	ImageURL        field.Field  // 文章图片
	OriginURL       field.String // 原文链接
	OriginAuthor    field.String // 原文作者
	AdminID         field.Uint   // 管理员id
	Keywords        field.String // SEO关键词
	Description     field.String // SEO描述
	Sort            field.Int32  // 排序
	ArticleCategory articleBelongsToArticleCategory

	ArticleContent articleHasOneArticleContent

	ArticleStatistic articleHasOneArticleStatistic

	ArticleTags articleManyToManyArticleTags

	fieldMap map[string]field.Expr
}

func (a article) Table(newTableName string) *article {
	a.articleDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a article) As(alias string) *article {
	a.articleDo.DO = *(a.articleDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *article) updateTableName(table string) *article {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewUint(table, "id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.DeletedAt = field.NewField(table, "deleted_at")
	a.CategoryID = field.NewUint(table, "category_id")
	a.Title = field.NewString(table, "title")
	a.ImageURL = field.NewField(table, "image_url")
	a.OriginURL = field.NewString(table, "origin_url")
	a.OriginAuthor = field.NewString(table, "origin_author")
	a.AdminID = field.NewUint(table, "admin_id")
	a.Keywords = field.NewString(table, "keywords")
	a.Description = field.NewString(table, "description")
	a.Sort = field.NewInt32(table, "sort")

	a.fillFieldMap()

	return a
}

func (a *article) WithContext(ctx context.Context) IArticleDo { return a.articleDo.WithContext(ctx) }

func (a article) TableName() string { return a.articleDo.TableName() }

func (a article) Alias() string { return a.articleDo.Alias() }

func (a article) Columns(cols ...field.Expr) gen.Columns { return a.articleDo.Columns(cols...) }

func (a *article) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *article) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 17)
	a.fieldMap["id"] = a.ID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
	a.fieldMap["category_id"] = a.CategoryID
	a.fieldMap["title"] = a.Title
	a.fieldMap["image_url"] = a.ImageURL
	a.fieldMap["origin_url"] = a.OriginURL
	a.fieldMap["origin_author"] = a.OriginAuthor
	a.fieldMap["admin_id"] = a.AdminID
	a.fieldMap["keywords"] = a.Keywords
	a.fieldMap["description"] = a.Description
	a.fieldMap["sort"] = a.Sort

}

func (a article) clone(db *gorm.DB) article {
	a.articleDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a article) replaceDB(db *gorm.DB) article {
	a.articleDo.ReplaceDB(db)
	return a
}

type articleBelongsToArticleCategory struct {
	db *gorm.DB

	field.RelationField
}

func (a articleBelongsToArticleCategory) Where(conds ...field.Expr) *articleBelongsToArticleCategory {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a articleBelongsToArticleCategory) WithContext(ctx context.Context) *articleBelongsToArticleCategory {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a articleBelongsToArticleCategory) Session(session *gorm.Session) *articleBelongsToArticleCategory {
	a.db = a.db.Session(session)
	return &a
}

func (a articleBelongsToArticleCategory) Model(m *entity.Article) *articleBelongsToArticleCategoryTx {
	return &articleBelongsToArticleCategoryTx{a.db.Model(m).Association(a.Name())}
}

type articleBelongsToArticleCategoryTx struct{ tx *gorm.Association }

func (a articleBelongsToArticleCategoryTx) Find() (result *entity.ArticleCategory, err error) {
	return result, a.tx.Find(&result)
}

func (a articleBelongsToArticleCategoryTx) Append(values ...*entity.ArticleCategory) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a articleBelongsToArticleCategoryTx) Replace(values ...*entity.ArticleCategory) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a articleBelongsToArticleCategoryTx) Delete(values ...*entity.ArticleCategory) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a articleBelongsToArticleCategoryTx) Clear() error {
	return a.tx.Clear()
}

func (a articleBelongsToArticleCategoryTx) Count() int64 {
	return a.tx.Count()
}

type articleHasOneArticleContent struct {
	db *gorm.DB

	field.RelationField
}

func (a articleHasOneArticleContent) Where(conds ...field.Expr) *articleHasOneArticleContent {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a articleHasOneArticleContent) WithContext(ctx context.Context) *articleHasOneArticleContent {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a articleHasOneArticleContent) Session(session *gorm.Session) *articleHasOneArticleContent {
	a.db = a.db.Session(session)
	return &a
}

func (a articleHasOneArticleContent) Model(m *entity.Article) *articleHasOneArticleContentTx {
	return &articleHasOneArticleContentTx{a.db.Model(m).Association(a.Name())}
}

type articleHasOneArticleContentTx struct{ tx *gorm.Association }

func (a articleHasOneArticleContentTx) Find() (result *entity.ArticleContent, err error) {
	return result, a.tx.Find(&result)
}

func (a articleHasOneArticleContentTx) Append(values ...*entity.ArticleContent) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a articleHasOneArticleContentTx) Replace(values ...*entity.ArticleContent) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a articleHasOneArticleContentTx) Delete(values ...*entity.ArticleContent) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a articleHasOneArticleContentTx) Clear() error {
	return a.tx.Clear()
}

func (a articleHasOneArticleContentTx) Count() int64 {
	return a.tx.Count()
}

type articleHasOneArticleStatistic struct {
	db *gorm.DB

	field.RelationField
}

func (a articleHasOneArticleStatistic) Where(conds ...field.Expr) *articleHasOneArticleStatistic {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a articleHasOneArticleStatistic) WithContext(ctx context.Context) *articleHasOneArticleStatistic {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a articleHasOneArticleStatistic) Session(session *gorm.Session) *articleHasOneArticleStatistic {
	a.db = a.db.Session(session)
	return &a
}

func (a articleHasOneArticleStatistic) Model(m *entity.Article) *articleHasOneArticleStatisticTx {
	return &articleHasOneArticleStatisticTx{a.db.Model(m).Association(a.Name())}
}

type articleHasOneArticleStatisticTx struct{ tx *gorm.Association }

func (a articleHasOneArticleStatisticTx) Find() (result *entity.ArticleStatistic, err error) {
	return result, a.tx.Find(&result)
}

func (a articleHasOneArticleStatisticTx) Append(values ...*entity.ArticleStatistic) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a articleHasOneArticleStatisticTx) Replace(values ...*entity.ArticleStatistic) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a articleHasOneArticleStatisticTx) Delete(values ...*entity.ArticleStatistic) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a articleHasOneArticleStatisticTx) Clear() error {
	return a.tx.Clear()
}

func (a articleHasOneArticleStatisticTx) Count() int64 {
	return a.tx.Count()
}

type articleManyToManyArticleTags struct {
	db *gorm.DB

	field.RelationField
}

func (a articleManyToManyArticleTags) Where(conds ...field.Expr) *articleManyToManyArticleTags {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a articleManyToManyArticleTags) WithContext(ctx context.Context) *articleManyToManyArticleTags {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a articleManyToManyArticleTags) Session(session *gorm.Session) *articleManyToManyArticleTags {
	a.db = a.db.Session(session)
	return &a
}

func (a articleManyToManyArticleTags) Model(m *entity.Article) *articleManyToManyArticleTagsTx {
	return &articleManyToManyArticleTagsTx{a.db.Model(m).Association(a.Name())}
}

type articleManyToManyArticleTagsTx struct{ tx *gorm.Association }

func (a articleManyToManyArticleTagsTx) Find() (result []*entity.ArticleTag, err error) {
	return result, a.tx.Find(&result)
}

func (a articleManyToManyArticleTagsTx) Append(values ...*entity.ArticleTag) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a articleManyToManyArticleTagsTx) Replace(values ...*entity.ArticleTag) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a articleManyToManyArticleTagsTx) Delete(values ...*entity.ArticleTag) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a articleManyToManyArticleTagsTx) Clear() error {
	return a.tx.Clear()
}

func (a articleManyToManyArticleTagsTx) Count() int64 {
	return a.tx.Count()
}

type articleDo struct{ gen.DO }

type IArticleDo interface {
	gen.SubQuery
	Debug() IArticleDo
	WithContext(ctx context.Context) IArticleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IArticleDo
	WriteDB() IArticleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IArticleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IArticleDo
	Not(conds ...gen.Condition) IArticleDo
	Or(conds ...gen.Condition) IArticleDo
	Select(conds ...field.Expr) IArticleDo
	Where(conds ...gen.Condition) IArticleDo
	Order(conds ...field.Expr) IArticleDo
	Distinct(cols ...field.Expr) IArticleDo
	Omit(cols ...field.Expr) IArticleDo
	Join(table schema.Tabler, on ...field.Expr) IArticleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IArticleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IArticleDo
	Group(cols ...field.Expr) IArticleDo
	Having(conds ...gen.Condition) IArticleDo
	Limit(limit int) IArticleDo
	Offset(offset int) IArticleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IArticleDo
	Unscoped() IArticleDo
	Create(values ...*entity.Article) error
	CreateInBatches(values []*entity.Article, batchSize int) error
	Save(values ...*entity.Article) error
	First() (*entity.Article, error)
	Take() (*entity.Article, error)
	Last() (*entity.Article, error)
	Find() ([]*entity.Article, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Article, err error)
	FindInBatches(result *[]*entity.Article, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.Article) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IArticleDo
	Assign(attrs ...field.AssignExpr) IArticleDo
	Joins(fields ...field.RelationField) IArticleDo
	Preload(fields ...field.RelationField) IArticleDo
	FirstOrInit() (*entity.Article, error)
	FirstOrCreate() (*entity.Article, error)
	FindByPage(offset int, limit int) (result []*entity.Article, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IArticleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a articleDo) Debug() IArticleDo {
	return a.withDO(a.DO.Debug())
}

func (a articleDo) WithContext(ctx context.Context) IArticleDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a articleDo) ReadDB() IArticleDo {
	return a.Clauses(dbresolver.Read)
}

func (a articleDo) WriteDB() IArticleDo {
	return a.Clauses(dbresolver.Write)
}

func (a articleDo) Session(config *gorm.Session) IArticleDo {
	return a.withDO(a.DO.Session(config))
}

func (a articleDo) Clauses(conds ...clause.Expression) IArticleDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a articleDo) Returning(value interface{}, columns ...string) IArticleDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a articleDo) Not(conds ...gen.Condition) IArticleDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a articleDo) Or(conds ...gen.Condition) IArticleDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a articleDo) Select(conds ...field.Expr) IArticleDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a articleDo) Where(conds ...gen.Condition) IArticleDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a articleDo) Order(conds ...field.Expr) IArticleDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a articleDo) Distinct(cols ...field.Expr) IArticleDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a articleDo) Omit(cols ...field.Expr) IArticleDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a articleDo) Join(table schema.Tabler, on ...field.Expr) IArticleDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a articleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IArticleDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a articleDo) RightJoin(table schema.Tabler, on ...field.Expr) IArticleDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a articleDo) Group(cols ...field.Expr) IArticleDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a articleDo) Having(conds ...gen.Condition) IArticleDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a articleDo) Limit(limit int) IArticleDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a articleDo) Offset(offset int) IArticleDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a articleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IArticleDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a articleDo) Unscoped() IArticleDo {
	return a.withDO(a.DO.Unscoped())
}

func (a articleDo) Create(values ...*entity.Article) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a articleDo) CreateInBatches(values []*entity.Article, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a articleDo) Save(values ...*entity.Article) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a articleDo) First() (*entity.Article, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Article), nil
	}
}

func (a articleDo) Take() (*entity.Article, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Article), nil
	}
}

func (a articleDo) Last() (*entity.Article, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Article), nil
	}
}

func (a articleDo) Find() ([]*entity.Article, error) {
	result, err := a.DO.Find()
	return result.([]*entity.Article), err
}

func (a articleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Article, err error) {
	buf := make([]*entity.Article, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a articleDo) FindInBatches(result *[]*entity.Article, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a articleDo) Attrs(attrs ...field.AssignExpr) IArticleDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a articleDo) Assign(attrs ...field.AssignExpr) IArticleDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a articleDo) Joins(fields ...field.RelationField) IArticleDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a articleDo) Preload(fields ...field.RelationField) IArticleDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a articleDo) FirstOrInit() (*entity.Article, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Article), nil
	}
}

func (a articleDo) FirstOrCreate() (*entity.Article, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Article), nil
	}
}

func (a articleDo) FindByPage(offset int, limit int) (result []*entity.Article, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a articleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a articleDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a articleDo) Delete(models ...*entity.Article) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *articleDo) withDO(do gen.Dao) *articleDo {
	a.DO = *do.(*gen.DO)
	return a
}
